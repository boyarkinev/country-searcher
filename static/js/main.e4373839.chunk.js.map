{"version":3,"sources":["components/modules/CountriesApi.js","components/CountrySearch/СountryList/CountryList.jsx","components/CountrySearch/DropdownList/DropdownList.jsx","components/CountrySearch/CountrySearch.jsx","App.js","serviceWorker.js","index.js","components/CountrySearch/СountryList/CountryList.module.css","components/CountrySearch/CountrySearch.module.css","components/CountrySearch/DropdownList/DropdownList.module.css"],"names":["CountriesApi","getCountries","value","fetch","then","res","ok","json","Promise","reject","status","CountryList","props","className","classes","itemContainer","text","name","capital","src","flag","alt","DropdownList","Option","Select","select","defaultValue","onChange","console","log","CountrySearch","countriesApi","useState","input","setInput","countriesData","setCountriesData","countriesList","map","country","i","key","title","form","type","placeholder","e","preventDefault","target","list","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"sMAAqBA,E,sCAEpBC,aAAe,SAACC,GACf,OAAOC,MAAM,yCAAD,OAA0CD,IACrDE,MAAK,SAAAC,GACL,OAAKA,EAAIC,GAGFD,EAAIE,OAFHC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,iBCO1BC,EAVK,SAACC,GACnB,OACE,wBAAIC,UAAWC,IAAQC,eACrB,uBAAGF,UAAWC,IAAQE,MAAOJ,EAAMK,MACnC,uBAAGJ,UAAWC,IAAQE,MAAOJ,EAAMM,SACnC,yBAAKC,IAAKP,EAAMQ,KAAMC,IAAI,OAAOR,UAAWC,IAAQM,S,kCCc3CE,EAjBM,WAAO,IAElBC,EAAWC,IAAXD,OAMR,OACE,kBAAC,IAAD,CAAQV,UAAWC,IAAQW,OAAQC,aAAa,KAAKC,SALvD,SAAkBzB,GAChB0B,QAAQC,IAAR,mBAAwB3B,MAKtB,kBAACqB,EAAD,CAAQrB,MAAM,OAAd,MACA,kBAACqB,EAAD,CAAQrB,MAAM,UAAd,MACA,kBAACqB,EAAD,CAAQrB,MAAM,SAAd,Q,iBCkCS4B,EA7CO,WACpB,IAAMC,EAAe,IAAI/B,EADC,EAGAgC,mBAAS,IAHT,mBAGnBC,EAHmB,KAGZC,EAHY,OAIgBF,mBAAS,IAJzB,mBAInBG,EAJmB,KAIJC,EAJI,KAkBpBC,EAAgBF,EAAcG,KAAI,SAACC,EAASC,GAAV,OACtC,kBAAC,EAAD,CACEvB,KAAMsB,EAAQtB,KACdC,QAASqB,EAAQrB,QACjBE,KAAMmB,EAAQnB,KACdqB,IAAKD,OAIT,OACE,6BACE,wBAAI3B,UAAWC,IAAQ4B,OAAvB,0BACA,0BAAM7B,UAAWC,IAAQ6B,MACvB,2BACEC,KAAK,OACLC,YAAY,YACZlB,SA5Ba,SAACmB,GACpBA,EAAEC,iBACFb,EAASY,EAAEE,OAAO9C,OACb4C,EAAEE,OAAO9C,MAGZ6B,EAAa9B,aAAa6C,EAAEE,OAAO9C,OAAOE,MAAK,SAACC,GAC9C+B,EAAiB/B,MAHnB+B,EAAiB,KAyBblC,MAAO+B,EACPpB,UAAWC,IAAQmB,QAErB,kBAAC,EAAD,OAEA,wBAAIpB,UAAWC,IAAQmC,MAAOZ,KCjCvBa,EATH,WAEV,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCIcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a,mBExI5BC,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,KAAO,0BAA0B,KAAO,4B,mBCA7GD,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,KAAO,4BAA4B,MAAQ,6BAA6B,KAAO,8B,mBCAtID,EAAOC,QAAU,CAAC,OAAS,6BAA6B,OAAS,+B","file":"static/js/main.e4373839.chunk.js","sourcesContent":["export default class CountriesApi {\r\n\r\n\tgetCountries = (value) => {\r\n\t\treturn fetch(`https://restcountries.eu/rest/v2/name/${value}`)\r\n\t\t.then(res => {\r\n\t\t\tif (!res.ok) {\r\n\t\t\t\treturn Promise.reject(`Ошибка: ${res.status}`)\r\n      }\r\n\t\t\treturn res.json()\r\n\t\t})\r\n\t}\r\n}","import React from 'react';\r\nimport classes from './CountryList.module.css';\r\n\r\nconst CountryList = (props) => {\r\n  return (\r\n    <li className={classes.itemContainer}>\r\n      <p className={classes.text}>{props.name}</p>\r\n      <p className={classes.text}>{props.capital}</p>\r\n      <img src={props.flag} alt='Flag' className={classes.flag} />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CountryList;","import React from 'react';\r\nimport { Select } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport classes from './DropdownList.module.css'\r\n\r\nconst DropdownList = () => {\r\n\r\n  const { Option } = Select;\r\n\r\n  function onChange(value) {\r\n    console.log(`selected ${value}`);\r\n  }\r\n\r\n  return (\r\n    <Select className={classes.select} defaultValue=\"50\" onChange={onChange}>\r\n      <Option value=\"ten\">10</Option>\r\n      <Option value=\"twenty\">20</Option>\r\n      <Option value=\"fifty\">50</Option>\r\n    </Select>\r\n  );\r\n};\r\n\r\nexport default DropdownList;","import React, { useState } from 'react';\r\nimport CountriesApi from './../modules/CountriesApi';\r\nimport CountryList from './СountryList/CountryList';\r\nimport DropdownList from './DropdownList/DropdownList';\r\nimport classes from './CountrySearch.module.css';\r\n\r\nconst CountrySearch = () => {\r\n  const countriesApi = new CountriesApi();\r\n\r\n  const [input, setInput] = useState('');\r\n  const [countriesData, setCountriesData] = useState([]);\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setInput(e.target.value);\r\n    if (!e.target.value) {\r\n      setCountriesData([]);\r\n    } else {\r\n      countriesApi.getCountries(e.target.value).then((res) => {\r\n        setCountriesData(res);\r\n      });\r\n    }\r\n  };\r\n\r\n  const countriesList = countriesData.map((country, i) => (\r\n    <CountryList\r\n      name={country.name}\r\n      capital={country.capital}\r\n      flag={country.flag}\r\n      key={i}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={classes.title}>Country Search Service</h1>\r\n      <form className={classes.form}>\r\n        <input\r\n          type='text'\r\n          placeholder='Search...'\r\n          onChange={handleChange}\r\n          value={input}\r\n          className={classes.input}\r\n        />\r\n        <DropdownList />\r\n      </form>\r\n        <ul className={classes.list}>{countriesList}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountrySearch;\r\n","import React from 'react';\nimport './App.css';\nimport CountrySearch from './components/CountrySearch/CountrySearch';\n\nconst App = () => {\n\n  return (\n    <div className='App'>\n      <CountrySearch />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContainer\":\"CountryList_itemContainer__2U_aK\",\"flag\":\"CountryList_flag__MEoQ0\",\"text\":\"CountryList_text__3wCbP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"CountrySearch_title__1xBEV\",\"form\":\"CountrySearch_form__3_fd4\",\"input\":\"CountrySearch_input__15QLS\",\"list\":\"CountrySearch_list__1GP6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"DropdownList_select__3s03E\",\"option\":\"DropdownList_option__2lEr-\"};"],"sourceRoot":""}