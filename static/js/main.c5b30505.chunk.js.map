{"version":3,"sources":["components/CountrySearch/СountryList/CountryList.jsx","components/CountrySearch/DropdownList/DropdownList.jsx","utils/validators.js","api/CountriesApi.js","commons/Preloader/Preloader.jsx","components/CountrySearch/CountrySearch.jsx","components/App.js","index.js"],"names":["CountryList","props","className","name","capital","src","flag","alt","DropdownList","defaultValue","onChange","value","isEng","text","test","countriesApi","getCountries","a","fetch","res","ok","Promise","reject","status","json","override","css","Preloader","size","color","loading","CountrySearch","useState","input","setInput","countriesData","setCountriesData","customSelectValue","setCustomSelectValue","isActive","setIsActive","isLoading","setIsLoading","countriesList","map","country","i","cn","warn","type","placeholder","e","target","trim","then","catch","err","console","log","slice","App","ReactDOM","render","document","getElementById"],"mappings":"4TAceA,G,MAVK,SAACC,GACnB,OACE,qBAAIC,UAAU,gBAAd,UACE,mBAAGA,UAAU,OAAb,SAAqBD,EAAME,OAC3B,mBAAGD,UAAU,OAAb,SAAqBD,EAAMG,UAC3B,qBAAKC,IAAKJ,EAAMK,KAAMC,IAAI,OAAOL,UAAU,cCMlCM,G,MAXM,SAACP,GAEpB,OACE,yBAAQC,UAAU,SAASO,aAAa,KAAKC,SAAUT,EAAMS,SAA7D,UACE,wBAAQC,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBCNSC,EAJD,SAACC,GACb,MAAO,SAASC,KAAKD,I,uBCDjBE,EACC,oCAWQC,EARG,uCAAG,WAAOL,GAAP,eAAAM,EAAA,sEACDC,MAAM,GAAD,OAAIH,EAAJ,gBAA4BJ,IADhC,WACbQ,EADa,QAEVC,GAFU,yCAGVC,QAAQC,OAAR,uIAA2CH,EAAII,UAHrC,gCAKZJ,EAAIK,QALQ,2CAAH,sD,yLCClB,IAAMC,EAAWC,cAAH,KAqBCC,EAdG,SAAC1B,GAEjB,OACE,qBAAKC,UAAU,gBAAf,SACE,cAAC,IAAD,CACEwB,IAAKD,EACLG,KAAM,IACNC,MAAO,aACPC,QAAS7B,EAAM6B,aCuDRC,EAhEO,WAAO,IAAD,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,OAEgBF,mBAAS,IAFzB,mBAEnBG,EAFmB,KAEJC,EAFI,OAGwBJ,mBAAS,MAHjC,mBAGnBK,EAHmB,KAGAC,EAHA,OAIMN,oBAAS,GAJf,mBAInBO,EAJmB,KAITC,EAJS,OAKQR,oBAAS,GALjB,mBAKnBS,EALmB,KAKRC,EALQ,KA0BpBC,EAAgBR,EAAcS,KAAI,SAACC,EAASC,GAAV,OACtC,cAAC,EAAD,CACE3C,KAAM0C,EAAQ1C,KACdC,QAASyC,EAAQzC,QACjBE,KAAMuC,EAAQvC,MACTwC,MAST,OACE,gCACE,oBAAI5C,UAAU,QAAd,oCACA,mBAAGA,UAAW6C,IAAG,eAAgB,CAAEC,KAAMT,IAAzC,qDAGA,uBAAMrC,UAAU,OAAhB,UACE,uBACE+C,KAAK,OACLC,YAAY,YACZxC,SA3CkB,SAACyC,GACzB,IAAKvC,EAAMuC,EAAEC,OAAOzC,OAA4B,KAAnBwC,EAAEC,OAAOzC,OACpC,OAAOwC,EAAEC,OAAOzC,MAAM0C,QAAUb,GAAY,GAE5CA,GAAY,GAGdN,EAASiB,EAAEC,OAAOzC,OACjBwC,EAAEC,OAAOzC,MAENK,EAAamC,EAAEC,OAAOzC,OACnB2C,MAAK,SAAAnC,GACJuB,GAAa,GACbN,EAAiBjB,GACjBuB,GAAa,MAEda,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAP5BpB,EAAiB,KAmCfzB,MAAOsB,EACP/B,UAAU,UAEZ,cAAC,EAAD,CAAcQ,SAnBO,SAACyC,GAC1Bb,EAAqBa,EAAEC,OAAOzC,OAC9BgC,EAAcgB,MAAM,EAApB,UAA0BR,EAAEC,OAAOzC,cAoBjC,cAAC,EAAD,CAAWmB,QAASW,IAEpB,oBAAIvC,UAAU,OAAd,SAAsByC,EAAcgB,MAAM,EAApB,UAA0BtB,UCvDvCuB,EATH,WAEV,OACE,qBAAK1D,UAAU,MAAf,SACE,cAAC,EAAD,OCHN2D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c5b30505.chunk.js","sourcesContent":["import './CountryList.css';\r\n\r\nimport React from 'react';\r\n\r\nconst CountryList = (props) => {\r\n  return (\r\n    <li className='itemContainer'>\r\n      <p className='text'>{props.name}</p>\r\n      <p className='text'>{props.capital}</p>\r\n      <img src={props.flag} alt='Flag' className='flag' />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CountryList;","import './DropdownList.css'\r\n\r\nimport React from 'react';\r\n\r\nconst DropdownList = (props) => {\r\n\r\n  return (\r\n    <select className='select' defaultValue=\"50\" onChange={props.onChange}>\r\n      <option value=\"10\">10</option>\r\n      <option value=\"20\">20</option>\r\n      <option value=\"50\">50</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default DropdownList;","const isEng = (text) => {\n  return /[a-z]/i.test(text)\n}\n\nexport default isEng;","const countriesApi = {\n  url: 'https://restcountries.eu/rest/v2/'\n}\n\nconst getCountries = async (value) => {\n  const res = await fetch(`${countriesApi.url}name/${value}`);\n  if (!res.ok) {\n    return Promise.reject(`Неверный запрос. Ошибка: ${res.status}`);\n  }\n  return res.json();\n};\n\nexport default getCountries;","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport BarLoader from \"react-spinners/BarLoader\";\n\n// Can be a string as well. Need to ensure each key-value pair ends with ;\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  border-radius: 2px;\n`;\n\nconst Preloader = (props) => {\n\n  return (\n    <div className=\"sweet-loading\">\n      <BarLoader\n        css={override}\n        size={150}\n        color={\"dodgerblue\"}\n        loading={props.loading}\n      />\n    </div>\n  );\n}\n\nexport default Preloader;","import './CountrySearch.css';\r\nimport cn from 'classnames';\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport CountryList from './СountryList/CountryList';\r\nimport DropdownList from './DropdownList/DropdownList';\r\nimport isEng from '../../utils/validators';\r\nimport getCountries from '../../api/CountriesApi';\r\nimport Preloader from '../../commons/Preloader/Preloader';\r\n\r\nconst CountrySearch = () => {\r\n  const [input, setInput] = useState('');\r\n  const [countriesData, setCountriesData] = useState([]);\r\n  const [customSelectValue, setCustomSelectValue] = useState('50');\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleInputChange = (e) => {\r\n    if (!isEng(e.target.value || e.target.value === '')) {\r\n      return e.target.value.trim() && setIsActive(true);\r\n    } else {\r\n      setIsActive(false);\r\n    }\r\n\r\n    setInput(e.target.value);\r\n    !e.target.value\r\n      ? setCountriesData([])\r\n      : getCountries(e.target.value)\r\n          .then(res => {\r\n            setIsLoading(true)\r\n            setCountriesData(res);\r\n            setIsLoading(false)\r\n          })\r\n          .catch(err => console.log(err));\r\n  };\r\n\r\n  const countriesList = countriesData.map((country, i) => (\r\n    <CountryList\r\n      name={country.name}\r\n      capital={country.capital}\r\n      flag={country.flag}\r\n      key={i}\r\n    />\r\n  ));\r\n\r\n  const handleSelectChange = (e) => {\r\n    setCustomSelectValue(e.target.value);\r\n    countriesList.slice(0, `${e.target.value}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className='title'>Country Search Service</h1>\r\n      <p className={cn('message-rule', { warn: isActive })}>\r\n        The text must be typed in Latin letters\r\n      </p>\r\n      <form className='form'>\r\n        <input\r\n          type='text'\r\n          placeholder='Search...'\r\n          onChange={handleInputChange}\r\n          value={input}\r\n          className='input'\r\n        />\r\n        <DropdownList onChange={handleSelectChange} />\r\n      </form>\r\n\r\n      <Preloader loading={isLoading} />\r\n\r\n      <ul className='list'>{countriesList.slice(0, `${customSelectValue}`)}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountrySearch;\r\n","import './App.css';\r\n\r\nimport React from 'react';\r\n\r\nimport CountrySearch from './CountrySearch/CountrySearch';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className='App'>\r\n      <CountrySearch />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}